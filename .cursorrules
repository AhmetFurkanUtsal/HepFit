# HepFit Sports Application - Android Development Rules

## Communication Rules

- All code comments must be written in Turkish
- Variable names and function names should be in English

## Android Development Focus

### Technology Stack

- **Platform**: Android React Native Development
- **Target SDK**: Android API 30+ (Android 11+)
- **Min SDK**: Android API 21 (Android 5.0)
- **Architecture**: Clean Architecture principles

### Android-Specific Optimizations

#### Performance Optimizations

- Use FlatList/VirtualizedList (critical for Android performance)
- Optimize useMemo and useCallback hooks
- Use react-native-fast-image for Android image optimization
- Implement lazy loading for better Android memory management
- Use Hermes engine for better JavaScript performance
- Optimize for lower-end Android devices

#### Android UI/UX Guidelines

- Follow Material Design principles
- Use SafeAreaView for Android notch handling
- Implement proper keyboard avoiding behavior for Android
- Use Android-specific navigation patterns
- Handle Android back button properly
- Implement Android-specific splash screen

#### Android Build Optimizations

- Enable Proguard for release builds
- Use APK splitting for size optimization
- Implement Android App Bundle (AAB) format
- Optimize drawable resources for different densities
- Use vector drawables when possible

### Android Testing

- Use Android Emulator for testing
- Test on different Android screen sizes
- Test on different Android API levels
- Use Android Debug Bridge (ADB) for debugging
- Test memory usage with Android profiler

## Design System

### Color Palette

#### Primary Colors

- _Primary Blue Dark_: #001F30 - Ana koyu mavi renk
- _Primary Blue Medium_: #002D46 - Orta ton mavi
- _Primary Blue Light_: #003C5D - Açık mavi ton
- _Primary Blue_: #004B73 - Standart mavi
- _Primary Blue Bright_: #01649A - Parlak mavi, butonlar için

#### Card Colors

- _Card Background_: #F5F5F5 - Kart arka planı
- _Card Border_: #E5E5E5 - Kart kenarlığı
- _Card Shadow_: rgba(0, 0, 0, 0.25) - Kart gölgesi (Android elevation)

#### Android Material Colors

- _Surface_: #FFFFFF - Yüzey rengi
- _Background_: #F5F5F5 - Arka plan rengi
- _Error_: #B00020 - Hata rengi
- _On Surface_: #000000 - Yüzey üstü metin
- _On Background_: #000000 - Arka plan üstü metin

### Typography

#### Font Family

- _Primary_: Lato - Ana font ailesi
- _Secondary_: Roboto - Android sistem fontu
- _Monospace_: Roboto Mono - Kod ve sayısal veriler için

#### Android Font Scales

- _Small_: 12sp
- _Body_: 14sp
- _Subheading_: 16sp
- _Title_: 20sp
- _Headline_: 24sp
- _Display_: 32sp

## Android Page Organization Rules

### Folder Structure

```
src/
  pages/
    WelcomePage/
      ├── index.js          // Sayfa export'u
      ├── Welcome.js        // Ana component
      └── Welcome.styles.js // Android-specific stiller

    LoginPage/
      ├── index.js
      ├── Login.js
      └── Login.styles.js

    ProfilePage/
      ├── index.js
      ├── Profile.js
      └── Profile.styles.js

  android/
    ├── components/       // Android-specific componentler
    ├── utils/           // Android-specific utilities
    └── styles/          // Android tema stilleri
```

### File Naming Conventions

#### 1. Folder Name

- **Format**: `{PageName}Page` (PascalCase)
- **Example**: `WelcomePage`, `WorkoutDetailsPage`, `UserProfilePage`

#### 2. Main Component File

- **Format**: `{PageName}.js` (PascalCase)
- **Example**: `Welcome.js`, `WorkoutDetails.js`, `UserProfile.js`

#### 3. Index File

- **File name**: `index.js`
- **Content**: Exports the main component

#### 4. Style File

- **Format**: `{PageName}.styles.js` (PascalCase)
- **Example**: `Welcome.styles.js`, `WorkoutDetails.styles.js`

### Android-Specific File Templates

#### index.js Template

```javascript
// Ana component'i export et
export {default} from './Welcome';
```

#### Main Component Template

```javascript
import React from 'react';
import {View, Text, StatusBar, BackHandler} from 'react-native';
import {SafeAreaView} from 'react-native-safe-area-context';
import styles from './Welcome.styles';

// --- Alt Bileşenler (Sub-components) ---
// Sayfanın mantıksal bölümlerini ayrı bileşenler olarak tanımlamak,
// ana bileşeni (Welcome) temiz ve okunabilir tutar.

const WelcomeHeader = () => (
  <View style={styles.header}>
    <Text style={styles.title}>Hoş Geldiniz</Text>
  </View>
);

const WelcomeContent = () => (
  <View style={styles.content}>
    {/* Sayfa içeriği buraya gelecek */}
    <Text style={styles.bodyText}>Uygulamamıza hoş geldiniz!</Text>
  </View>
);

// --- Ana Sayfa Bileşeni (Main Page Component) ---
// Ana bileşen, alt bileşenleri bir araya getiren "ana yapı" görevi görür.
const Welcome = () => {
  // Android geri tuşu işlemi
  React.useEffect(() => {
    const backAction = () => {
      // Android geri tuşu davranışı buraya
      return true;
    };

    const backHandler = BackHandler.addEventListener(
      'hardwareBackPress',
      backAction,
    );

    return () => backHandler.remove();
  }, []);

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar
        barStyle="light-content"
        backgroundColor="#001F30"
        translucent={false}
      />
      <WelcomeHeader />
      <WelcomeContent />
    </SafeAreaView>
  );
};

export default Welcome;
```

#### Android Style File Template

```javascript
import {StyleSheet, Dimensions, PixelRatio} from 'react-native';

const {width, height} = Dimensions.get('window');
const scale = PixelRatio.get();

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5', // Card Background rengi
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
    paddingVertical: 16,
  },
  title: {
    fontSize: 24,
    fontFamily: 'Lato-Bold',
    color: '#001F30', // Primary Blue Dark
    textAlign: 'center',
    marginBottom: 20,
    // Android için elevation
    elevation: 2,
  },
  // Android Material Design button
  materialButton: {
    backgroundColor: '#01649A',
    borderRadius: 8,
    elevation: 3, // Android gölge
    paddingVertical: 12,
    paddingHorizontal: 24,
  },
  // Android ripple effect için
  touchableRipple: {
    borderless: false,
    color: 'rgba(255, 255, 255, 0.32)',
  },
});

export default styles;
```

### Android Development Workflow

When adding a new page:

1. **Determine page name from Figma MVP link**
2. **Create folder**: `{PageName}Page/`
3. **Create three files**: `index.js`, `{PageName}.js`, `{PageName}.styles.js`
4. **Add Android-specific navigation**
5. **Follow Material Design colors and typography**
6. **Test on Android emulator**

### Android-Specific Components Structure

```
src/
  android/
    components/
      MaterialButton/
        ├── index.js
        ├── MaterialButton.js
        └── MaterialButton.styles.js

      AndroidCard/
        ├── index.js
        ├── AndroidCard.js
        └── AndroidCard.styles.js
```

### Android Utilities and Services Structure

```
src/
  android/
    utils/
      ├── androidPermissions.js
      ├── androidBackHandler.js
      └── androidKeyboard.js

    services/
      ├── androidStorage.js
      ├── androidNotifications.js
      └── androidDeepLinks.js

    constants/
      ├── androidColors.js
      ├── androidTypography.js
      ├── androidDimensions.js
      └── androidMaterialTheme.js
```

### Android Navigation Integration

```javascript
// App.js - Android Navigation
import React from 'react';
import {NavigationContainer} from '@react-navigation/native';
import {createNativeStackNavigator} from '@react-navigation/native-stack';
import {StatusBar} from 'react-native';

import WelcomePage from './src/pages/WelcomePage';
import LoginPage from './src/pages/LoginPage';

const Stack = createNativeStackNavigator();

function App() {
  return (
    <NavigationContainer>
      <StatusBar barStyle="light-content" backgroundColor="#001F30" />
      <Stack.Navigator
        screenOptions={{
          headerStyle: {
            backgroundColor: '#001F30',
          },
          headerTintColor: '#FFFFFF',
          headerTitleStyle: {
            fontFamily: 'Lato-Bold',
          },
        }}>
        <Stack.Screen
          name="Welcome"
          component={WelcomePage}
          options={{headerShown: false}}
        />
        <Stack.Screen
          name="Login"
          component={LoginPage}
          options={{title: 'Giriş Yap'}}
        />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

export default App;
```

## Android Performance Guidelines

### Bundle Optimization

- Enable Hermes engine for Android
- Use Android App Bundle (AAB) format
- Implement APK splitting by ABI and density
- Tree shaking for unused code cleanup
- Lazy imports for on-demand loading

### Android Memory Management

```javascript
useEffect(() => {
  const subscription = someService.subscribe();

  // Android için cleanup function - bellek sızıntısını önler
  return () => {
    subscription.unsubscribe();
  };
}, []);
```

### Android Network Optimization

- Use Android Network Security Config
- Implement caching for API responses
- Use Android-specific retry logic
- Request batching for multiple requests
- Handle Android network state changes

### Android Build Configuration

```javascript
// android/app/build.gradle için optimizasyonlar
android {
  compileSdkVersion 33
  buildToolsVersion "33.0.0"

  defaultConfig {
    applicationId "com.hepfit"
    minSdkVersion 21
    targetSdkVersion 33
    versionCode 1
    versionName "1.0"

    // Android için multi-dex desteği
    multiDexEnabled true
  }

  buildTypes {
    release {
      // Android için Proguard
      minifyEnabled true
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"

      // Android App Bundle
      bundle {
        language {
          enableSplit = false
        }
        density {
          enableSplit = true
        }
        abi {
          enableSplit = true
        }
      }
    }
  }
}
```

### Android Testing Commands

```bash
# Android emulator başlatma
npx react-native run-android

# Android release build
npx react-native run-android --variant=release

# Android bundle oluşturma
npx react-native build-android --mode=release

# ADB ile device bağlantısı kontrol
adb devices

# Android logları görüntüleme
npx react-native log-android
```

dependencies {
implementation jscFlavor
}

apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")

### Asset Management (Varlık Yönetimi)

- **Tüm resimler, ikonlar ve fontlar `src/assets` klasörü altında toplanmalıdır.**
- Resimler, kullanım amaçlarına göre alt klasörlere ayrılmalıdır: `logos`, `backgrounds`, `icons`, `illustrations`.
- Tüm varlıklar, `src/assets/images/index.ts` dosyasından export edilerek merkezi bir noktadan yönetilmelidir. Bu, kod içinde uzun `require` yollarını önler.

#### Asset Klasör Yapısı

```
src/
  assets/
    ├── fonts/
    ├── images/
    │   ├── index.ts          // Resimlerin export edildiği yer
    │   ├── backgrounds/
    │   │   └── background.png
    │   ├── logos/
    │   │   └── logo.png
    │   └── icons/
    └── ...
```

#### `src/assets/images/index.ts` Şablonu

```typescript
// Bu dosya, resim varlıklarını tek bir yerden import edebilmek için kullanılır.
// Projedeki tüm resimler burada export edilmelidir.

export const Images = {
  logo: require('./logos/logo.png'),
  loginBackground: require('./backgrounds/background.png'),
};
```

#### Komponent içinde Resim Kullanımı

```javascript
import React from 'react';
import {Image, ImageBackground, View, Text} from 'react-native';
import {Images} from '../../assets/images'; // Merkezi index.ts'den import et

const MyComponent = () => {
  return (
    <ImageBackground source={Images.loginBackground} style={{flex: 1}}>
      <View>
        <Image source={Images.logo} style={{width: 100, height: 100}} />
        <Text>Hoş geldiniz</Text>
      </View>
    </ImageBackground>
  );
};

export default MyComponent;
```
